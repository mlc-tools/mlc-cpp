class tests/TestShuffle<ITestShuffle>
{
    fn void test_shuffle()
    {
        Shuffle s;

        // Пустая карта — вернёт default(T)
        map<int, float> w0;
        auto r0 = s.shuffle(w0);
        assertEqual(r0, 0, "empty map -> default");

        // Все нули — вернёт последний ключ (map по возрастанию ключей)
        map<int, float> w1;
        w1[1] = 0.f; w1[2] = 0.f; w1[3] = 0.f;
        auto r1 = s.shuffle(w1);
        assertEqual(r1, 3, "all zero -> last key");

        // Единственный положительный вес — всегда он
        map<int, float> w2;
        w2[5] = 0.f; w2[7] = 10.f; w2[9] = 0.f;
        auto r2 = s.shuffle(w2);
        assertEqual(r2, 7, "single positive weight picked");

        // Отрицательные веса игнорируются (зажимаются до 0)
        map<int, float> w3;
        w3[1] = -5.f; w3[2] = 3.f; w3[3] = -2.f;
        auto r3 = s.shuffle(w3);
        assertEqual(r3, 2, "negative weights ignored");
    }

    fn void test_shuffle_with_random_value()
    {
        Shuffle s;
        map<int, float> w;
        w[1] = 1.f; // prefix: 1
        w[2] = 2.f; // prefix: 3
        w[3] = 3.f; // prefix: 6

        // Границы первого интервала [0,1]
        assertEqual(s.shuffle(w, 0.0f), 1, "rv=0 -> 1");
        assertEqual(s.shuffle(w, 0.999f), 1, "rv<1 -> 1");
        assertEqual(s.shuffle(w, 1.0f), 1, "rv=1 -> 1 (>=)");

        // Второй интервал (1,3]
        assertEqual(s.shuffle(w, 1.001f), 2, "rv just over 1 -> 2");
        assertEqual(s.shuffle(w, 2.999f), 2, "rv<3 -> 2");
        assertEqual(s.shuffle(w, 3.0f), 2, "rv=3 -> 2 (>=)");

        // Третий интервал (3,6]
        assertEqual(s.shuffle(w, 3.001f), 3, "rv just over 3 -> 3");
        assertEqual(s.shuffle(w, 5.999f), 3, "rv<6 -> 3");
    }

    fn void test_shuffle_ignores_negative_weights_with_random_value()
    {
        Shuffle s;
        map<int, float> w;
        w[10] = -5.f; // игнорируется
        w[20] = 5.f;  // единственный валидный вес
        assertEqual(s.shuffle(w, 0.0f), 20, "only positive key returned");
        assertEqual(s.shuffle(w, 4.999f), 20, "edge before total -> 20");
    }
}
