class tests/TestSystemShoot<ITestSystemShoot>
{
    fn void test_update()
    {
        // smoke-тест: update не падает и может создавать пули
        auto model = new ModelEcsBaseMock(false);
        model->ground->ground = {{0,0},{0,0}};
        DataUnit shooter_du; shooter_du.stats[UnitStat::shoot_radius] = 1000.f; shooter_du.stats[UnitStat::size] = 1.f; shooter_du.stats_string[UnitStat::bullet] = "spirit_lightning_bullet";
        int shooter_id = BuilderEntity(&shooter_du).set_side(Side::ally).set_position(Vector(0,0)).build(model);
        auto recharge = new ComponentRecharge(); recharge->recharge = 0.f; model->add(recharge, shooter_id); model->add(new ComponentShootBullet(), shooter_id);
        DataUnit target_du; target_du.stats[UnitStat::health] = 100.f; target_du.stats[UnitStat::size] = 1.f;
        BuilderEntity(&target_du).set_side(Side::enemy).set_position(Vector(10,0)).build(model);
        SystemShoot().update(model, 0.0f);
        assertTrue(list_size(model->components_bullet) >= 0ul, "update ok");
    }
    fn void test_try_shoot()
    {
        auto model = new ModelEcsBaseMock(false);
        model->ground->ground = {{0,0},{0,0}};
        DataUnit shooter_du; shooter_du.stats[UnitStat::shoot_radius] = 1000.f; shooter_du.stats[UnitStat::size] = 1.f; shooter_du.stats_string[UnitStat::bullet] = "spirit_lightning_bullet";
        int shooter_id = BuilderEntity(&shooter_du).set_side(Side::ally).set_position(Vector(0,0)).build(model);
        auto recharge = new ComponentRecharge(); recharge->recharge = 0.f; model->add(recharge, shooter_id);
        model->add(new ComponentShootBullet(), shooter_id);
        DataUnit target_du; target_du.stats[UnitStat::health] = 100.f; target_du.stats[UnitStat::size] = 1.f;
        int target_id = BuilderEntity(&target_du).set_side(Side::enemy).set_position(Vector(10,0)).build(model);
        auto bullets_before = list_size(model->components_bullet);
        SystemShoot().try_shoot(model, recharge);
        assertTrue(list_size(model->components_bullet) >= bullets_before, "try_shoot ok");
    }
    fn void test_update_creates_bullets()
    {
        auto model = new ModelEcsBaseMock(false);
        model->ground->ground = {{0,0},{0,0}};

        // Стрелок
        DataUnit shooter_du;
        shooter_du.stats[UnitStat::shoot_radius] = 1000.f;
        shooter_du.stats[UnitStat::size] = 1.f;
        shooter_du.stats_string[UnitStat::bullet] = "spirit_lightning_bullet";
        int shooter_id = BuilderEntity(&shooter_du).set_side(Side::ally).set_position(Vector(0,0)).build(model);
        auto recharge = new ComponentRecharge();
        recharge->recharge = 0.f;
        model->add(recharge, shooter_id);
        model->add(new ComponentShootBullet(), shooter_id);

        // Цель
        DataUnit target_du;
        target_du.stats[UnitStat::health] = 100.f;
        target_du.stats[UnitStat::size] = 1.f;
        int target_id = BuilderEntity(&target_du).set_side(Side::enemy).set_position(Vector(10,0)).build(model);

        auto bullets_before = list_size(model->components_bullet);
        SystemShoot().update(model, 0.0f);
        auto bullets_after = list_size(model->components_bullet);
        assertTrue(bullets_after > bullets_before, "после update созданы пули");
    }

    fn void test_find_target()
    {
        auto model = new ModelEcsBaseMock(false);
        model->ground->ground = {{0,0},{0,0}};

        // Стрелок
        DataUnit shooter_du;
        shooter_du.stats[UnitStat::shoot_radius] = 1000.f;
        shooter_du.stats[UnitStat::size] = 1.f;
        int shooter_id = BuilderEntity(&shooter_du).set_side(Side::ally).set_position(Vector(0,0)).build(model);
        auto recharge = new ComponentRecharge();
        recharge->recharge = 0.f;
        model->add(recharge, shooter_id);

        // Две цели
        DataUnit d;
        d.stats[UnitStat::health] = 100.f;
        d.stats[UnitStat::size] = 1.f;
        int t1 = BuilderEntity(&d).set_side(Side::enemy).set_position(Vector(20,0)).build(model);
        int t2 = BuilderEntity(&d).set_side(Side::enemy).set_position(Vector(10,0)).build(model);

        auto target = SystemShoot().find_target(model, recharge);
        assertTrue(target == t2 || target == t1, "получена валидная цель");
    }
    fn void test_get_nearest_entity_in_radius()
    {
        auto model = new ModelEcsBaseMock(false);
        model->ground->ground = {{0,0},{0,0}};
        DataUnit shooter_du; shooter_du.stats[UnitStat::shoot_radius] = 1000.f; shooter_du.stats[UnitStat::size] = 1.f;
        int shooter_id = BuilderEntity(&shooter_du).set_side(Side::ally).set_position(Vector(0,0)).build(model);
        auto side_shooter = model->get<ComponentSide>(shooter_id);
        auto transform_shooter = model->get<Transform>(shooter_id);
        DataUnit d; d.stats[UnitStat::health] = 100.f; d.stats[UnitStat::size] = 1.f;
        int t1 = BuilderEntity(&d).set_side(Side::enemy).set_position(Vector(20,0)).build(model);
        int t2 = BuilderEntity(&d).set_side(Side::enemy).set_position(Vector(10,0)).build(model);
        auto res = SystemShoot::get_nearest_entity_in_radius(model, shooter_id, 1000.f, side_shooter, transform_shooter, true, -1);
        assertTrue(res == t2 || res == t1, "непустая цель");
    }
    fn void test_shoot()
    {
        auto model = new ModelEcsBaseMock(false);
        model->ground->ground = {{0,0},{0,0}};
        DataUnit shooter_du; shooter_du.stats[UnitStat::shoot_radius] = 1000.f; shooter_du.stats[UnitStat::size] = 1.f; shooter_du.stats_string[UnitStat::bullet] = "spirit_lightning_bullet";
        int shooter_id = BuilderEntity(&shooter_du).set_side(Side::ally).set_position(Vector(0,0)).build(model);
        auto recharge = new ComponentRecharge(); recharge->recharge = 0.f; model->add(recharge, shooter_id);
        DataUnit target_du; target_du.stats[UnitStat::health] = 100.f; target_du.stats[UnitStat::size] = 1.f;
        int target_id = BuilderEntity(&target_du).set_side(Side::enemy).set_position(Vector(10,0)).build(model);
        auto before = list_size(model->components_bullet);
        SystemShoot().shoot(model, recharge, target_id);
        assertTrue(list_size(model->components_bullet) >= before, "shoot ok");
    }
}
