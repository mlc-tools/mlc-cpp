class tests/TestDataLadderLevels<ITestDataLadderLevels>
{
    fn DataLadderLevels get_mock()
    {
        DataLadderLevels result;
        result.values.push_back(0);
        result.values.push_back(10);
        result.values.push_back(100);
        return result;
    }

    fn void test_get_value()
    {
        auto mock = this->get_mock();
        assertEqual(mock.get_value(0), 0.f, "index 0 equal 0");
        assertEqual(mock.get_value(1), 10.f, "index 1 equal 10");
        assertEqual(mock.get_value(2), 100.f, "index 2 equal 100");
    }
    fn void test_get_level()
    {
        auto mock = this->get_mock();
        assertEqual(mock.get_level(0), 0, "cerrect level on value 0");
        assertEqual(mock.get_level(5), 0, "cerrect level on value 5");
        assertEqual(mock.get_level(10), 1, "cerrect level on value 10");
        assertEqual(mock.get_level(15), 1, "cerrect level on value 15");
        assertEqual(mock.get_level(150), 2, "cerrect level on value 150");
    }
    fn void test_get_progress_to_next_level()
    {
        auto mock = this->get_mock();
        assertEqual(mock.get_progress_to_next_level(0), 0.f, "progress 0 exp");
        assertEqual(mock.get_progress_to_next_level(5), 0.5f, "progress middle level 0");
        assertEqual(mock.get_progress_to_next_level(150), 1.f, "progress max level");
    }
    fn void test_get_progress_to_next_level_int()
    {
        auto mock = this->get_mock();
        assertEqual(mock.get_progress_to_next_level_int(0), 0, "no exp collected");
        assertEqual(mock.get_progress_to_next_level_int(5), 5, "collected five exp");
        assertEqual(mock.get_progress_to_next_level_int(15), 5, "collected five exp on level 1");
    }
    fn void test_get_count_to_next_level_int()
    {
        auto mock = this->get_mock();
        assertEqual(mock.get_count_to_next_level_int(0), 10, "need ten exp to level 1");
        assertEqual(mock.get_count_to_next_level_int(15), 90, "need ninety exp to level 2");
        assertEqual(mock.get_count_to_next_level_int(150), 1, "max level returns one");
    }
}