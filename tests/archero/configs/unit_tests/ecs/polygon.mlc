class tests/TestPolygon<ITestPolygon>
{
    fn Polygon get_convex()
    {
        Polygon poly;
        poly.points.push_back(Vector(0, 0));
        poly.points.push_back(Vector(1, 0));
        poly.points.push_back(Vector(1, 1));
        poly.points.push_back(Vector(0, 1));
        return poly;
    }

    fn Polygon get_concave()
    {
        Polygon poly;
        poly.points.push_back(Vector(0, 0));
        poly.points.push_back(Vector(2, 0));
        poly.points.push_back(Vector(1, 1));
        poly.points.push_back(Vector(2, 2));
        poly.points.push_back(Vector(0, 2));
        return poly;
    }

    fn void test_is_convex_polygon()
    {
        auto poly = this->get_convex();
        assertTrue(poly.is_convex_polygon(), "convex polygon");
    }

    fn void test_is_convex_polygon_false()
    {
        auto poly = this->get_concave();
        assertFalse(poly.is_convex_polygon(), "concave polygon");
    }

    fn void test_is_convex_polygon_not_enough_points()
    {
        Polygon poly;
        poly.points.push_back(Vector(0,0));
        poly.points.push_back(Vector(1,0));
        assertFalse(poly.is_convex_polygon(), "not polygon");
    }
}

class tests/TestBBox<ITestBBox>
{
    fn void test_update()
    {
        list<Vector> pts;
        pts.push_back(Vector(-1, -2));
        pts.push_back(Vector(3, 4));
        pts.push_back(Vector(0, 5));
        BBox box;
        box.update(pts);
        assertEqual(box.min.x, -1.f, "min x");
        assertEqual(box.min.y, -2.f, "min y");
        assertEqual(box.max.x, 3.f, "max x");
        assertEqual(box.max.y, 5.f, "max y");
    }
}

