class tests/TestBuilderEntity<ITestBuilderEntity>
{
    fn void test_constructor()
    {
        DataUnit data;
        BuilderEntity a;
        assertNull(a.data, "default null");
        BuilderEntity b(&data);
        assertEqual(b.data, &data, "data set");
    }
    fn void test_set_level()
    {
        BuilderEntity b;
        b.set_level(5);
        assertEqual(b.level, 5, "level set");
    }
    fn void test_set_side()
    {
        BuilderEntity b;
        b.set_side(Side::ally);
        assertEqual(b.side, Side::ally, "side set");
    }
    fn void test_set_user()
    {
        BuilderEntity b;
        auto user = new ModelUser();
        b.set_user(user);
        assertEqual(b.user, user, "user set");
    }
    fn void test_set_position()
    {
        BuilderEntity b;
        Vector pos(1,2);
        b.set_position(pos);
        assertEqual(b.position.x, 1.f, "pos x");
        assertEqual(b.position.y, 2.f, "pos y");
    }
    fn void test_build()
    {
        auto model = new ModelEcsBaseMock(false);
        DataUnit data;
        BuilderEntity b(&data);
        b.set_side(Side::ally).set_position(Vector(0,0));
        int id = b.build(model);
        assertEqual(id, 1, "id returned");
    }
    fn void test_add_components_from_data()
    {
        auto model = new ModelEcsBaseMock(false);
        DataUnit data;
        BuilderEntity b(&data);
        b.add_components_from_data(model, 1);
        assertTrue(true, "no crash");
    }
    fn void test_add_components_from_equipment()
    {
        auto model = new ModelEcsBaseMock(false);
        DataUnit data;
        BuilderEntity b(&data);
        b.add_components_from_equipment(model, 1);
        assertTrue(true, "no crash");
    }
}

class tests/TestBuilderDamage<ITestBuilderDamage>
{
    fn void test_set_damage()
    {
        BuilderDamage b;
        b.set_damage(10.f);
        assertEqual(b.damage, 10.f, "damage set");
    }
    fn void test_build()
    {
        auto model = new ModelEcsBaseMock(false);
        BuilderDamage b;
        b.set_damage(5.f);
        int id = b.build(model, 1, 2, 3);
        auto d = model->get<ComponentDamage>(id);
        assertEqual(d->attacker_id, 1, "attacker");
        assertEqual(d->bullet_id, 2, "bullet");
        assertEqual(d->target_id, 3, "target");
        assertEqual(d->damage, 5.f, "damage");
    }
}

class tests/TestBuilderBullet<ITestBuilderBullet>
{
    fn void test_set_damage()
    {
        BuilderBullet b(1);
        b.set_damage(7.f);
        assertEqual(b.damage, 7.f, "set damage");
    }
    fn void test_set_side()
    {
        BuilderBullet b(1);
        b.set_side(Side::ally);
        assertEqual(b.side, Side::ally, "set side");
    }
    fn void test_constructor()
    {
        BuilderBullet b1;
        assertEqual(b1.shooter_id, 0, "default shooter");
        BuilderBullet b2(5);
        assertEqual(b2.shooter_id, 5, "set shooter");
    }
    fn void test_set_name()
    {
        BuilderBullet b(1);
        b.set_name("arrow");
        assertEqual(b.bullet_name, "arrow", "name set");
    }
    fn void test_set_target_id()
    {
        BuilderBullet b(1);
        b.set_target_id(2);
        assertEqual(b.target_id, 2, "target id");
    }
    fn void test_set_position_create()
    {
        BuilderBullet b(1);
        Vector v(1,2);
        b.set_position_create(v);
        assertEqual(b.position_create.x, 1.f, "pos x");
        assertEqual(b.position_create.y, 2.f, "pos y");
    }
    fn void test_set_position_to_shoot()
    {
        BuilderBullet b(1);
        Vector v(3,4);
        b.set_position_to_shoot(v);
        assertEqual(b.position_to_shoot.x, 3.f, "pos x");
        assertEqual(b.position_to_shoot.y, 4.f, "pos y");
    }
    fn void test_set_direction()
    {
        BuilderBullet b(1);
        Vector v(0,1);
        b.set_direction(v);
        assertEqual(b.direction.x, 0.f, "dir x");
        assertEqual(b.direction.y, 1.f, "dir y");
    }
    fn void test_set_offset_create()
    {
        BuilderBullet b(1);
        Vector v(0.5f,0.5f);
        b.set_offset_create(v);
        assertEqual(b.offset_create.x, 0.5f, "off x");
        assertEqual(b.offset_create.y, 0.5f, "off y");
    }
    fn void test_set_deviation_from_direction()
    {
        BuilderBullet b(1);
        b.set_deviation_from_direction(0.1f);
        assertEqual(b.deviation_from_direction, 0.1f, "deviation");
    }
    fn void test_set_spine_bone_of_create_bullet()
    {
        BuilderBullet b(1);
        b.set_spine_bone_of_create_bullet("hand");
        assertEqual(b.spine_bone_of_create_bullet, "hand", "bone");
    }
    fn void test_build()
    {
        BuilderBullet b(1);
        assertTrue(true, "placeholder");
    }
    fn void test_get_position_to_create()
    {
        BuilderBullet b(1);
        b.set_position_create(Vector(1,1));
        auto pos = b.get_position_to_create(nullptr);
        assertEqual(pos.x, 1.f, "pos x");
        assertEqual(pos.y, 1.f, "pos y");
    }
    fn void test_get_target_position()
    {
        BuilderBullet b(1);
        b.set_position_to_shoot(Vector(2,3));
        auto pos = b.get_target_position(nullptr);
        assertEqual(pos.x, 2.f, "pos x");
        assertEqual(pos.y, 3.f, "pos y");
    }
    fn void test_get_preemption()
    {
        BuilderBullet b(1);
        auto res = b.get_preemption(Vector(1,0), Vector(0,0), 0.f, Vector(0,0), 1.f);
        assertEqual(res.x, 1.f, "pre x");
        assertEqual(res.y, 0.f, "pre y");
    }
    fn void test_get_direction()
    {
        BuilderBullet b(1);
        b.set_direction(Vector(0,1));
        auto dir = b.get_direction(nullptr);
        assertEqual(dir.x, 0.f, "dir x");
        assertEqual(dir.y, 1.f, "dir y");
    }
    fn void test_get_bullet_name()
    {
        BuilderBullet b(1);
        b.set_name("fire");
        auto model = new ModelEcsBaseMock(false);
        ComponentStats stats;
        auto name = b.get_bullet_name(model, &stats);
        assertEqual(name, "fire", "bullet name");
    }
}
