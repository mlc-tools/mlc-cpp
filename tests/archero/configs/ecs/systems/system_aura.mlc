class ecs/ComponentAura<ComponentBase>
{
    string name
    bool:runtime initialized = false
    float radius
}
class ecs/ComponentAuraOfSlow<ComponentAura>
{
}

class ecs/ComponentAuraDamage<ComponentAura>
{
    float damage_mul = 0.2
    map<int, float> damaged_entities
}

class ecs/SystemAuroOfSlow
{
    fn void update(ModelEcsBase* model, float dt)
    {
        model->each<ComponentAuraOfSlow>(
            [&](auto& aura)
            {
                if(!aura->initialized)
                {
                    aura->initialized = true;
                    model->event_aura_activated[aura->id].notify(aura);
                }
                float radius_sq = aura->radius * aura->radius;
                auto aura_transform = model->get<Transform>(aura->id);

                model->each<ComponentMovement, Transform>(
                    [&](auto& movement, auto& transform)
                    {
                        if(movement->id == aura->id)
                        {
                            return;
                        }
                        auto offset = transform->position - aura_transform->position;
                        offset.y /= 0.8f;
                        auto dist_sq = offset.length_sq();
                        movement->aura_slow = dist_sq <= radius_sq ? aura : nullptr;
                        movement->slow_k = dist_sq <= radius_sq ? std::max(0.5f, dist_sq / radius_sq) : 1;
                    });
            });
    }
}

class ecs/SystemAuraDamage
{
    @include ComponentAuraDamage
    fn void update(ModelEcsBase* model, float dt)
    {
        model->each<ComponentAuraDamage>(
            [&](auto& aura)
            {    
                if(!aura->initialized)
                {
                    aura->initialized = true;
                    model->event_aura_activated[aura->id].notify(aura);
                }
                float radius_sq = aura->radius * aura->radius;
                auto aura_transform = model->get<Transform>(aura->id);
                auto aura_stats = model->get<ComponentStats>(aura->id);

                model->each<Transform>(
                    [&](auto& transform)
                    {
                        if(transform->id == aura->id)
                        {
                            return;
                        }
                        if(aura->damaged_entities[transform->id] > 0)
                        {
                            aura->damaged_entities[transform->id] -= dt;
                            return;
                        }
                        auto dist_sq = transform->position.get_distance_sq(aura_transform->position);
                        if(dist_sq < radius_sq)
                        {
                            aura->damaged_entities[transform->id] = 2;

                            float damage = aura_stats->get(model, UnitStat::damage) * aura->damage_mul;
                            BuilderDamage().set_damage(damage).build(model, aura->id, -1, transform->id);
                        }
                    });
            });
    }
}