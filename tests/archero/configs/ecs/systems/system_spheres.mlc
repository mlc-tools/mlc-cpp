class ecs/ComponentSphereSpawn<ComponentBase>
{
    bool spawned = false
    int count = 2
    DataUnit:link data
}

class ecs/ComponentSphere<ComponentBase>
{
    int hero_id
    float angle
    float radius = 200
    float speed = 3.14

    map<int, float> ignore_targets
}

class ecs/SystemSphere
{
    fn void update(ModelEcsBase* model, float dt)
    {
        this->check_spawn(model);
        this->update_positions(model, dt);
    }

    fn void check_spawn(ModelEcsBase* model)
    {
        auto spawn = model->get<ComponentSphereSpawn>(model->player_id);
        if(spawn && !spawn->spawned)
        {
            this->spawn(model, spawn);
        }
    }
    fn void spawn(ModelEcsBase* model, ComponentSphereSpawn* spawn)
    {
        auto hero_transform = model->get<Transform>(model->player_id);
        for(int i=0; i<spawn->count; ++i)
        {
            auto id = BuilderEntity(spawn->data).set_side(Side::ally).set_position(hero_transform->position).build(model);
            auto sphere = model->get<ComponentSphere>(id);
            auto bullet = model->get<ComponentBullet>(id);
            sphere->hero_id = model->player_id;
            bullet->shooter_id = model->player_id;
            bullet->always_life = true;

            model->event_create_bullet.notify(id, hero_transform->position);
        }
        spawn->spawned = true;

        auto count = model->components_sphere.size();
        int i = 0;
        model->each<ComponentSphere>([&](auto& sphere)
            {
                sphere->angle = 2 * M_PI * i++ / count;
            });
    }
    fn void update_positions(ModelEcsBase* model, float dt)
    {
        model->each<ComponentSphere, Transform>(
            [&](auto& sphere, auto& transform)
            {
                auto hero_transform = model->get<Transform>(sphere->hero_id);
                sphere->angle += sphere->speed * dt;
                if(sphere->angle > M_PI * 2)
                {
                    sphere->angle -= M_PI * 2;
                }
                auto offset = Vector::build_vector(sphere->angle) * sphere->radius;
                offset.y *= 0.8;
                transform->position = hero_transform->position + offset;
                transform->rotation = 360 -sphere->angle * 180 / M_PI + 270;
            });
    }
}
