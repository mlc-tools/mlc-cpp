class ecs/ElectricDamage<ComponentBase>
{
    float value = 0
    int shooter_id = 0
}

class ecs/SystemElectricDamage
{
    fn void add_damage(ModelEcsBase* model, int shooter_id, int target_id, float amount):static
    {
        auto electric = model->get<ElectricDamage>(target_id);
        if(!electric)
        {
            electric = new ElectricDamage();
            model->add(electric, target_id);
        }
        electric->value += amount * (1 - model->get<ComponentStats>(target_id)->get(model, UnitStat::electric_resist));
        electric->shooter_id = shooter_id;
        if(electric->value >= 1)
        {
            electric->value = 0;
            auto transform = model->get<Transform>(target_id);
            auto side_shooter = model->get<ComponentSide>(shooter_id);
            int t1 = 0; float d1 = 1000000;
            int t2 = 0; float d2 = 1000000;
            int t3 = 0; float d3 = 1000000;
            if(transform && side_shooter)
            {
                model->each_if<ComponentSide, ComponentTargetable, ComponentHealth, Transform>(
                    [&](auto& side, auto& targetable, auto& health, auto& transform_candidate)
                    {
                        return side_shooter->is_enemy(side->side) && health->id != target_id && health->get_future_value() > 0;
                    },
                    [&](auto& side, auto& targetable, auto& health, auto& transform_candidate)
                    {
                        auto dist = transform_candidate->position.get_distance_sq(transform->position);
                        if(dist < d1)
                        {
                            t3 = t2; d3 = d2;
                            t2 = t1; d2 = d1;
                            t1 = health->id; d1 = dist;
                        }
                        else if(dist < d2)
                        {
                            t3 = t2; d3 = d2;
                            t2 = health->id; d2 = dist;
                        }
                        else if(dist < d3)
                        {
                            t3 = health->id; d3 = dist;
                        }
                    });

                model->event_effects[target_id].notify("electric");
                auto damage =  model->get<ComponentStats>(shooter_id)->get(model, UnitStat::damage) / 6;
                if(t1)
                {
                    BuilderBullet(target_id).set_side(side_shooter->side).set_damage(damage).set_name("spirit_lightning_bullet").set_target_id(t1).build(model);
                }
                if(t2)
                {
                    BuilderBullet(target_id).set_side(side_shooter->side).set_damage(damage).set_name("spirit_lightning_bullet").set_target_id(t2).build(model);
                }
                if(t3)
                {
                    BuilderBullet(target_id).set_side(side_shooter->side).set_damage(damage).set_name("spirit_lightning_bullet").set_target_id(t3).build(model);
                }
            }
        }
    }
}
