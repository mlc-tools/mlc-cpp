class ecs/ComponentStun<ComponentBase>
{
    bool activated = false
    float timer = 0
    float resist_timer = 0
}

class ecs/SystemStun
{
    fn void update(ModelEcsBase* model, float dt)
    {
        model->each<ComponentStun>(
            [&](auto& stun)
            {
                if(stun->resist_timer > 0)
                {
                    stun->resist_timer -= dt;
                }
                if(!stun->activated)
                {
                    return;
                }
                stun->timer -= dt;
                if(stun->timer <= 0)
                {
                    stun->activated = false;
                    stun->timer = 0;
                    stun->resist_timer = 5;
                    model->event_stun_deactivated[stun->id].notify();
                }
            });
    }

    fn void apply(ModelEcsBase* model, int target_id, float duration):static
    {
        auto stun = model->get<ComponentStun>(target_id);
        if(!stun)
        {
            stun = new ComponentStun();
            model->add(stun, target_id);
        }
        if(stun->resist_timer > 0 || stun->activated)
        {
            return;
        }

        stun->activated = true;
        stun->timer = std::max(stun->timer, duration);
        model->event_stun_activated[target_id].notify();
    }
}
