class ecs/FireDamage<ComponentBase>
{
    float value = 0
    float burning_timer = 0
    bool burning = false
    int shooter_id = 0
    float damage_timer = 0
}

class ecs/SystemFireDamage
{
    fn void add_damage(ModelEcsBase* model, int shooter_id, int target_id, float amount):static
    {
        auto fire = model->get<FireDamage>(target_id);
        if(!fire)
        {
            fire = new FireDamage();
            model->add(fire, target_id);
        }
        if(fire->burning)
        {
            return;
        }
        fire->value += amount * (1 - model->get<ComponentStats>(target_id)->get(model, UnitStat::fire_resist));
        fire->shooter_id = shooter_id;
        if(fire->value >= 1)
        {
            fire->burning = true;
            fire->burning_timer = 5;
            fire->damage_timer = 1;
            model->event_fire_activated[fire->id].notify();
        }
    }

    fn void update(ModelEcsBase* model, float dt)
    {
        model->each<FireDamage>(
            [&](auto& fire)
            {
                if(fire->burning)
                {
                    fire->burning_timer -= dt;
                    fire->damage_timer -= dt;
                    if(fire->damage_timer <= 0)
                    {
                        fire->damage_timer += 1;
                        auto damage = SystemDamage::compute_damage(model, fire->shooter_id, fire->id);
                        BuilderDamage().set_damage(damage * 0.2).build(model, fire->shooter_id, -1, fire->id);
                    }
                    if(fire->burning_timer <= 0)
                    {
                        fire->burning = false;
                        fire->value = 0;
                        fire->shooter_id = 0;
                        fire->damage_timer = 0;
                        model->event_fire_deactivated[fire->id].notify();
                    }
                }
            });
    }
}
