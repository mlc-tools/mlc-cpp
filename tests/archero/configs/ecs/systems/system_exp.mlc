class ecs/ComponentLevelUp<ComponentBase>
{
    int level
    int exp_current
}

class ecs/ComponentExp<ComponentBase>
{
    int count 
    bool clean = false
}

class ecs/ComponentExpDrop<ComponentBase>
{
    int count
}

class ecs/SystemExp
{
    fn void update(ModelEcsBase* model, float dt)
    {
        this->create_exp(model);

        auto player_transform = model->get<Transform>(model->player_id);
        auto dist = 100 * 100;
        model->each<ComponentExp,Transform>(
            [&](auto& exp, auto& transform)
            {
                if(transform->position.get_distance_sq(player_transform->position) < dist)
                {
                    auto level = model->get<ComponentLevelUp>(model->player_id);
                    level->exp_current += exp->count;
                    model->event_hero_exp_changed.notify();

                    exp->clean = true;
                }
            });

        auto ladder = DataStorage::shared().get<DataLadderLevels>("hero_exp");
        for(auto& level_up : model->components_level_up)
        {
            auto level = ladder->get_level(level_up->exp_current);
            if(level_up->level != level)
            {
                level_up->level += 1;
                model->event_hero_level_up.notify();
            }
        }
    }
    fn void clean(ModelEcsBase* model)
    {
        list_do_if(model->components_exp, (component :> component->clean == true :> model->remove_entity(component->id)));
    }
    fn void create_exp(ModelEcsBase* model)
    {
        model->each_if<ComponentExpDrop, ComponentHealth>(
            [&](auto& exp_drop, auto& health)
            {
                return health->get_current() <= 0;
            },
            [&](auto& exp_drop, auto& health)
            {
                auto transform = model->get<Transform>(exp_drop->id);
                auto data = DataStorage::shared().get<DataUnit>("entity_exp");
                auto id = BuilderEntity(data).set_side(mg::Side::ally).set_position(transform->position).build(model);
                model->event_create_entity.notify(id, transform->position);

                auto component_exp = model->get<ComponentExp>(id);
                component_exp->count = exp_drop->count;
            });
    }
}