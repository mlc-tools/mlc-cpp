class ecs/Polygon
{
    list<Vector> points
    BBox bbox
    
    fn bool is_convex_polygon()
    {
        int n = points.size();
        if (n < 3)
        {
            return false; // не многоугольник
        }

        float last_cross = 0.0f;
        bool has_sign = false;

        for (int i = 0; i < n; ++i)
        {
            Vector a = points[i];
            Vector b = points[(i + 1) % n];
            Vector c = points[(i + 2) % n];

            Vector edge1 = b - a;
            Vector edge2 = c - b;

            float cross = edge1.x * edge2.y - edge1.y * edge2.x;

            if (std::fabs(cross) < Vector::FLOAT_SMALL)
            {
                continue; // почти на одной линии – пропускаем
            }

            if (!has_sign)
            {
                last_cross = cross;
                has_sign = true;
            }
            else
            {
                // проверяем одинаковый знак
                if ((cross > 0 && last_cross < 0) || (cross < 0 && last_cross > 0))
                {
                    return false;
                }
            }
        }

        return true;
    }
}

class ecs/BBox
{
    Vector min
    Vector max

    fn void update(list<Vector>:ref:const points)
    {
        if(points.size() == 0)
        {
            this->min = Vector::ZERO;
            this->max = Vector::ZERO;
            return;
        }
        this->min = points[0];
        this->max = points[0];
        for(auto& p : points)
        {
            if(p.x < this->min.x) this->min.x = p.x;
            if(p.y < this->min.y) this->min.y = p.y;
            if(p.x > this->max.x) this->max.x = p.x;
            if(p.y > this->max.y) this->max.y = p.y;
        }
    }
}