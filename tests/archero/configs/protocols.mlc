class inet/CommandBase
{
    int current_time = 0
    function void accept(IVisitorResponse* visitor):client
    {
    }
}

class inet/CommandSequence<CommandBase>
{
    list<CommandBase*> commands
    function void accept(IVisitorResponse* visitor):client
    {
        for(auto command : this->commands)
            command->accept(visitor);
    }
}

class inet/Request<CommandBase>
{
	string auth_key
    int user_id = 0
    string version

    function bool is_online():const
    {
        return false;
    }
    function string build_payload():const:virtual
    {
        return "";
    }

    //runtime variables to execute on server side
    int:runtime current_time = 0
    // IDataBaseUser*:runtime data_base

    function CommandBase* execute()
    {
        return nullptr;
    }
    function ResponseError* error(string message)
    {
        auto response = new ResponseError();
        response->error = message;
        return response;
    }
}

class inet/Response<CommandBase>:visitor
{
}

class inet/ResponseOk<Response>
{
}
class inet/ResponseError<Response>
{
    string error
    constructor(string error = "")
    {
        this->error = error;
    }
}

