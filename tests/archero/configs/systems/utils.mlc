class utils/Shuffle
{
    fn<T> T shuffle(map<T, float>:const:ref weights, float random_value=-1):static
    {
        // Собираем префиксные суммы и делаем бинарный поиск (O(log n))
        float total = 0;
        T last; // последний ключ в исходной map (для случая total<=0)
        bool has_any = false;
        list<float> prefix;
        list<T> keys;

        for(auto&& [key, w] : weights)
        {
            float ww = std::max(0.f, w);
            total += ww;
            if(ww > 0)
            {
                prefix.push_back(total);
                keys.push_back(key);
            }
            last = key;
            has_any = true;
        }
        if(!has_any)
        {
            return T();
        }
        if(total <= 0)
        {
            return last;
        }

        if(random_value < 0)
        {
            random_value = random_float() * total;
        }

        // бинарный поиск по prefix
        int l = 0;
        int rgt = prefix.size() - 1;
        while(l < rgt)
        {
            int mid = (l + rgt) / 2;
            if(prefix[mid] >= random_value)
            {
                rgt = mid;
            }
            else
            {
                l = mid + 1;
            }
        }
        return keys[l];
    }
}
